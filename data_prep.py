
# Author: Mohammad Kamar Uddin
# Description: Preprating the test data for KNN algorithm. 

import csv


# Function to prepare the test data for prediction
# Input: test file name and a empty list
def prepare_test_data(testfilename, test_set=[]):
    temp_test_set = []

    # Reading data from CSV file
    with open(testfilename, 'rb') as csvfile:
        lines = csv.reader(csvfile)
        data_set = list(lines)
        new_data_set = data_set[1:] # Without hearder line

    # Create a temporary list of list by checking how many attributes in the test set
    for x in range(len(new_data_set)):
        dt = new_data_set[x]
        if len(dt) == 15:
            dt_final = dt[1:-1]
        elif len(dt) == 14:
            dt_final = dt[0:-1]
        else:
            dt_final = dt[1:]
        temp_test_set.append(dt_final)

    for x in range(len(temp_test_set)):

        for y in range(13):
            if temp_test_set[x][y] == 'Active':
                temp_test_set[x][y] = float(1)
            elif temp_test_set[x][y] == 'Tos' or temp_test_set[x][y] == 'TOS':
                temp_test_set[x][y] = float(0)
            elif temp_test_set[x][y] == 'Online':
                temp_test_set[x][y] = float(1)
            elif temp_test_set[x][y] == 'Offline':
                temp_test_set[x][y] = float(2)
            elif temp_test_set[x][y] == 'Captive':
                temp_test_set[x][y] = float(3)
            elif temp_test_set[x][y] == 'Enabled':
                temp_test_set[x][y] = float(1)
            elif temp_test_set[x][y] == 'Disabled':
                temp_test_set[x][y] = float(2)
            elif temp_test_set[x][y] == 'Good':
                temp_test_set[x][y] = float(1)
            elif temp_test_set[x][y] == 'Bad':
                temp_test_set[x][y] = float(2)
            else:
                temp_test_set[x][y] = float(temp_test_set[x][y])

        test_set.append(temp_test_set[x])


# Function to prepare the test set for appending predicted class (for final csv generation)
def prepare_test_set_for_appending(testfilename, append_set=[]):

    with open(testfilename, 'rb') as csvfile:
        lines = csv.reader(csvfile)
        data = list(lines)
        final_data_set = data[1:]

    for rec in range(len(final_data_set)):
        dt = final_data_set[rec]
        append_set.append(dt)


# Function to create a list of list with test data instance and predicted class
# Input: Two list (1. test data instance created using 'prepare_test_set_for_appending()' function
# 2. Prediction list generated by KNN)
def appending(data_set, predictions):
    pd = []

    for x in range(len(data_set)):
        ss = predictions[x]
        temp_set = data_set[x]
        temp_set.append(ss)
        pd.append(temp_set)

    return pd
